<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Terraform Primer on Infrastructure as Code Lab</title><link>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/</link><description>Recent content in Terraform Primer on Infrastructure as Code Lab</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Sep 2021 12:58:54 -0500</lastBuildDate><atom:link href="https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/index.xml" rel="self" type="application/rss+xml"/><item><title>Infrastructure as Code</title><link>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/infrastructure_as_code/</link><pubDate>Tue, 21 Sep 2021 12:54:50 -0500</pubDate><guid>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/infrastructure_as_code/</guid><description>Infrastructure as Code (IaC) allows you to document the configuration needs of your infrastructure through a vendor agnostic language vs using a device specific graphical/command line interface. Imagine a sysadmin needs to configure their vCenter/ESXi cluster including data centers, clusters, networks, and VMs. One option would be to click through the GUI to configure each of the required settings. Not only does this take time, but it likely introduces configuration drift (inconsistent configuration across like devices) as individual settings are configured over the lifetime of the platform.</description></item><item><title>Terraform Offerings</title><link>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/terraform_offerings/</link><pubDate>Wed, 22 Sep 2021 16:40:00 -0500</pubDate><guid>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/terraform_offerings/</guid><description>Terraform is available in three different offerings from Hashicorp today: Terraform OSS, Terraform Enterprise, and Terraform Cloud. Which offering you choose will depend upon things like your operational team size, security needs, version control support, governance needs, etc. Below we will discuss each Terraform offering.
Terraform OSS (CLI) The core of Terraform&amp;rsquo;s capability is distributed as a standalone executable called Terraform OSS (Open Source Software). Terraform Enterprise and Terraform Cloud wrap additional operational tooling around the Terraform OSS executable but under the hood all three of these offerings ultimately use Terraform OSS to manage infrastructure configuration.</description></item><item><title>Challenges with On-premise</title><link>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/ist/</link><pubDate>Sat, 02 Oct 2021 12:37:51 -0500</pubDate><guid>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/ist/</guid><description>In the previous chapter we discussed the many benefits of consuming Terraform via the Terraform Cloud SaaS offering. If you are only managing infrastructure with publicly accessible API endpoints (e.g. Intersight, AWS, Azure, GCP, etc) then the Terraform instances running within Terraform Cloud can talk to those services directly. However, if you plan to manage infrastructure within your private enterprise (e.g. ACI, vCenter, Infoblox, Firewalls, etc) then you run into a common challenge with SaaS offerings which is &amp;ldquo;How can you securely communicate from the public cloud to on-premise?</description></item><item><title>Core Concepts</title><link>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/core_concepts/</link><pubDate>Tue, 21 Sep 2021 13:04:01 -0500</pubDate><guid>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/core_concepts/</guid><description>Configuration Files When managing infrastructure with Terraform, all configuration is written into documents called Configuration files using the Terraform Language, which is Terraform&amp;rsquo;s primary user interface. Terraformâ€™s configuration language is declarative, meaning that it describes the desired end-state for your infrastructure, in contrast to procedural programming languages that require step-by-step instructions to perform tasks (more on this later).
Terraform language is a rich language designed to be relatively easy for humans to read and write.</description></item><item><title>Configuration Blocks</title><link>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/configuration_files/</link><pubDate>Wed, 22 Sep 2021 08:33:59 -0500</pubDate><guid>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/configuration_files/</guid><description>Resources Resources are the most important element in the Terraform language. Each resource block describes one or more infrastructure objects, such as an Intersight NTP policy, server profile, identity pool, AWS virtual network, compute instance, or high-level components such as DNS records. A resource block is also referred to as managed resource as Terraform is managing the configuration of that infrastructure object.
A resource block in a .tf config file declares a resource of a given type e.</description></item><item><title>State Management</title><link>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/state_management/</link><pubDate>Wed, 22 Sep 2021 16:39:04 -0500</pubDate><guid>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/state_management/</guid><description>As mentioned previously, Terraform&amp;rsquo;s ability to store any infrastructure&amp;rsquo;s configuration into a consistent state format is a key differentiator to how this IaC toolset works. Because state is so important it merits it&amp;rsquo;s own section to explain further.
Purpose of Terraform State Terraform uses state to document the expected configuration of managed infrastructure. You may wonder if Terraform could work without state by simply re-inspecting the managed resources prior to applying any configuration changes.</description></item><item><title>Actions</title><link>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/actions/</link><pubDate>Wed, 22 Sep 2021 16:39:42 -0500</pubDate><guid>https://wookie-labs.github.io/iac-workshop-intersight/terraform_primer/actions/</guid><description>Terraform&amp;rsquo;s primary function is to create, modify, and destroy infrastructure resources to match the desired state described in a Terraform configuration.
When people refer to &amp;ldquo;running Terraform&amp;rdquo;, they generally mean performing these provisioning actions in order to affect real infrastructure objects. The Terraform binary has many other subcommands for a wide variety of administrative actions, but these basic provisioning tasks are the core of Terraform.
Terraform&amp;rsquo;s provisioning workflow relies on four commands: init, plan, apply, and destroy.</description></item></channel></rss>